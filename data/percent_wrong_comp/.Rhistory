if (rownames(sim_cond)[i] %in% rownames(dif_cond)) {
row_of_interest = dif_cond[rownames(dif_cond) == rownames(sim_cond)[i],]
print(row_of_interest)
# if ((row_of_interest$PbergheiANKA != levels(sim_cond$TgondiiGT1)[1]) &
#     (row_of_interest$Pfalciparum3D7 != levels(sim_cond$TgondiiGT1)[1])) {
#   print(rownames(sim_cond[i,])) }
}}}}}}
for (i in 1:nrow(sim_cond)) {
if (!(is.na(sim_cond$TgondiiGT1[i])) & (sim_cond$TgondiiGT1[i] == levels(sim_cond$TgondiiGT1)[1])) {
if (!(is.na(sim_cond$TgondiiME49[i])) & (sim_cond$TgondiiGT1[i] == sim_cond$TgondiiME49[i])) {
if (!(is.na(sim_cond$ChominisTU502_2012[i])) & (sim_cond$TgondiiGT1[i] == sim_cond$ChominisTU502_2012[i])) {
if (!(is.na(sim_cond$CparvumIowaII[i])) & (sim_cond$TgondiiGT1[i] == sim_cond$CparvumIowaII[i])) {
if (rownames(sim_cond)[i] %in% rownames(dif_cond)) {
row_of_interest = dif_cond[rownames(dif_cond) == rownames(sim_cond)[i],]
if ((row_of_interest$PbergheiANKA != levels(sim_cond$TgondiiGT1)[1]) &
(row_of_interest$Pfalciparum3D7 != levels(sim_cond$TgondiiGT1)[1])) {
print(rownames(sim_cond[i,])) }
}}}}}}
for (i in 1:nrow(sim_cond)) {
if (!(is.na(sim_cond$TgondiiGT1[i])) & (sim_cond$TgondiiGT1[i] == levels(sim_cond$TgondiiGT1)[1])) {
if (!(is.na(sim_cond$TgondiiME49[i])) & (sim_cond$TgondiiGT1[i] == sim_cond$TgondiiME49[i])) {
if (!(is.na(sim_cond$ChominisTU502_2012[i])) & (sim_cond$TgondiiGT1[i] == sim_cond$ChominisTU502_2012[i])) {
if (!(is.na(sim_cond$CparvumIowaII[i])) & (sim_cond$TgondiiGT1[i] == sim_cond$CparvumIowaII[i])) {
if (rownames(sim_cond)[i] %in% rownames(dif_cond)) {
row_of_interest = dif_cond[rownames(dif_cond) == rownames(sim_cond)[i],]
if (is.na(row_of_interest$PbergheiANKA) | is.na(row_of_interest$Pfalciparum3D7)) { print(rownames(sim_cond[i,]))}
else if ((row_of_interest$PbergheiANKA != levels(sim_cond$TgondiiGT1)[1]) &
(row_of_interest$Pfalciparum3D7 != levels(sim_cond$TgondiiGT1)[1])) {
print(rownames(sim_cond[i,])) }
}}}}}}
levels(sim_cond$TgondiiGT1)[1]
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(0.1,.5,1,10))})
df_try
rownames(df_try) = rownames(df_temp)
df_try = as.data.frame(df_try)
table(df_try)
df_try
# normalized growth for KOs
df_temp = as.matrix(df)
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(0.1,.5,1,10))})
table(df_try)
df = read.csv("/Users/maureencarey/local_documents/work/comparative_parasite_models/paradigm/data/rxn_essentiality_matrix_jan.csv")
df2 = read.csv("/Users/maureencarey/local_documents/work/comparative_parasite_models/paradigm/data/rxn_essentiality_matrix_interpreted_jan.csv")
rownames(df) = df$X; df$X = NULL
colnames(df) = sub("_generic_biomass", "", colnames(df))
rownames(df2) = df2$X; df2$X = NULL
#df = df[, -c(4,6,8)]
sum_df <- data.frame(matrix(data=NA,nrow=ncol(df2),ncol=5))
colnames(sum_df) = c('Species','biomass','lethal','nonlethal','percent')
for (x in 1:ncol(df2)) {
sum_df$Species[x] = strsplit(colnames(df2)[x], split = '_')[[1]][1]
sum_df$biomass[x] = strsplit(colnames(df2)[x], split = '_')[[1]][2]
sum_df$lethal[x] = table(df2[,x])[[1]]
sum_df$nonlethal[x] = table(df2[,x])[[2]]
sum_df$percent[x] = sum_df$lethal[x]/(sum_df$lethal[x]+sum_df$nonlethal[x])
}
library(cluster)
df = df[,2:ncol(df)] # get rid of TgRH
df = df[,c(1,2,3,5,7,9,10)]# use only models with the same biomass
df_use = t(df)
dist_df = daisy(df_use)
df_to_melt = as.matrix(dist_df)
df_to_melt[upper.tri(df_to_melt)] <- NA
df_melt = melt(as.matrix(df_to_melt))
# normalized growth for KOs
df_temp = as.matrix(df)
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(0.1,.5,1,10))})
table(df_try)
df
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(0,0.1,.5,1,10))})
table(df_try)
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(-10,0,0.1,.5,1,10))})
rownames(df_try) = rownames(df_temp)
table(df_try)
hist(df_temp)
ggplot(data = df_temp) + geom_histogram()
table(df)
table(df_temp)
min(df_temp)
min(df_temp,na.rm)
min(df_temp,na.rm = T)
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(-10,-0.000001,0,0.1,.5,1,10))})
rownames(df_try) = rownames(df_temp)
table(df_try)
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(-10,-0.000001,0.1,.5,1,10))})
table(df_try)
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(-10,-0.000001,0.1,0.5,1,10))})
table(df_try)
df_try = apply(df_temp, 2, function(x) {cut(x, breaks = c(-10,-0.000001,0.1,0.5,1,1.5,10))})
table(df_try)
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file }
class(temp)
length(temp)
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = lapply(temp, function(x) {gsub('gapfilling_additions_with_biomass_','',temp)})
length(temp)
class(temp)
temp = list.files(pattern="gapfilling_additions*")
temp = apply(temp, function(x) {gsub('gapfilling_additions_with_biomass_','',temp)})
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('.csv','',temp, fixed = T)
temp
temp = gsub('_generic_biomass','',temp)
temp
temp = gsub('gapfilling_additions_','',temp)
temp
colnames(df) = temp
head(df)
df
for (i in 1:length(myfiles)) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = myfiles[[i]][j]
}}}
df
i
j
length(myfiles)
i
myfiles[[i]][j]
myfiles[[i]]
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 1:length(myfiles)) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = myfiles[[i]]$rxns_added[j]
}}}
warnings()
df
warnings()
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 1:length(myfiles)) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
print(myfiles[[i]]$rxns_added[j])
df[j,i] = myfiles[[i]]$rxns_added[j]
}}}
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 1:length(myfiles)) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
print(myfiles[[i]]$rxns_added[j])
df[j,i] = as.character(myfiles[[i]]$rxns_added[j])
}}}
#
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file }
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 1:length(myfiles)) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
print(as.character(myfiles[[i]]$rxns_added[j]))
df[j,i] = as.character(myfiles[[i]]$rxns_added[j])
}}}
warnings()
#
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file }
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 1:length(myfiles)) {
if (length(dim(myfiles[[i]][1])) > 1) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
else if (length(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
warnings()
for (i in 1:length(myfiles)) {
print(length(dim(myfiles[[i]][1])))
if (length(dim(myfiles[[i]][1])) > 1) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
else if (length(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
for (i in 1:7 ){#length(myfiles)) {
print(myfiles[[i]][1])
if (length(dim(myfiles[[i]][1])) > 1) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
else if (length(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
for (i in 6 ){#length(myfiles)) {
print(myfiles[[i]][1])
if (length(dim(myfiles[[i]][1])) > 1) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
else if (length(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
for (i in 1 ){#length(myfiles)) {
print(myfiles[[i]][1])
if (length(dim(myfiles[[i]][1])) > 1) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
else if (length(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
for (i in 1 ){#length(myfiles)) {
print(nrows(myfiles[[i]][1]))
if (length(dim(myfiles[[i]][1])) > 1) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
else if (length(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
for (i in 1 ){#length(myfiles)) {
print(nrow(myfiles[[i]][1]))
if (length(dim(myfiles[[i]][1])) > 1) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
else if (length(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
for (i in 6){#length(myfiles)) {
print(nrow(myfiles[[i]][1]))
if (length(dim(myfiles[[i]][1])) > 1) {
if (dim(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
else if (length(myfiles[[i]][1]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
myfiles[[i]]
#
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file }
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 6){#length(myfiles)) {
if (nrow(myfiles[[i]]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
df
df[1:4,1:4]
df[1:4,1:7]
df[1:4,6:15]
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file }
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 1:length(myfiles)) {
if (nrow(myfiles[[i]]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = as.character(myfiles[[i]]$rxns_added[j]) }}}
df
strsplit('test_t','_')
strsplit('test_t','_')[[1]]
strsplit('test_t','_')[[1]][1]
#
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file }
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 1:length(myfiles)) {
if (nrow(myfiles[[i]]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = strsplit(as.character(myfiles[[i]]$rxns_added[j]), ":", fixed = T)[[1]][1]}}}
df
table(df)
View(table(df))
count(df)
melt(df)
library(reshape2)
test = melt(df)
head(df)
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file }
df = as.data.frame(matrix(NA, nrow = prev_max, ncol = length(myfiles)))
temp = gsub('gapfilling_additions_with_biomass_','',temp)
temp = gsub('gapfilling_additions_ortho_','',temp)
# temp = gsub('gapfilling_additions_','',temp)
temp = gsub('_generic_biomass','',temp)
temp = gsub('.csv','',temp, fixed = T)
colnames(df) = temp
for (i in 1:length(myfiles)) {
if (nrow(myfiles[[i]]) > 0) {
for (j in 1:nrow(myfiles[[i]])) {
df[j,i] = strsplit(as.character(myfiles[[i]]$rxns_added[j]), ":", fixed = T)[[1]][1]}}}
cols_to_exclude = colnames(df)['gapfilling_additions_' %in% colnames(df)]
cols_to_exclude
temp
cols_to_exclude = colnames(df)['gapfilling_additions_*' %in% colnames(df)]
cols_to_exclude
cols_to_exclude = colnames(df)[startsWith(colnames(df),'gapfilling_additions_')]
cols_to_exclude
cols_to_exclude = colnames(df)[which(startsWith(colnames(df),'gapfilling_additions_'))]
cols_to_exclude
cols_to_exclude = startsWith(colnames(df),'gapfilling_additions_')
cols_to_exclude
temp
try_this = table(df)
head(try_this)
try_this
summary(df)
names(sort(table(df)))
as.factor(df)
alt_strategry = character()
class(alt_strategry)
alt_strategry
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
alt_strategry = character()
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file
alt_strategry = c(alt_strategry, file$rxns_added)}
alt_strategry
file$rxns_added
alt_strategry
alt_strategry = character()
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file
alt_strategry = append(alt_strategry, file$rxns_added)}
alt_strategry
alt_strategry
alt_strategry = character()
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file
for (j in file$rxns_added) {
alt_strategry = c(alt_strategry, as.character(j))}}
alt_strategry
#
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/gapfilling_additions/")
temp = list.files(pattern="gapfilling_additions*")
myfiles = lapply(temp, read.csv)
df = as.data.frame(matrix(NA))
prev_max = 0
alt_strategry = character()
for (i in 1:length(myfiles)) {
file = myfiles[[i]]
file$X = NULL
if (length(file$rxns_added)>prev_max) {prev_max = length(file$rxns_added)}
myfiles[[i]] = file
for (j in file$rxns_added) {
alt_strategry = c(alt_strategry, strsplit(as.character(j),":",fixed = T)[[1]][1])}}
alt_strategry
table(alt_strategry)
sort(table(alt_strategry))
head(sort(table(alt_strategry)))
tail(sort(table(alt_strategry)))
sort(names(table(alt_strategry)))
sort(names(table(alt_strategry)))[1000:length(sort(names(table(alt_strategry))))]
head(Df)
df
# percent in wrong compartment figure
setwd("~/local_documents/work/comparative_parasite_models/paradigm/data/percent_wrong_comp")
file_list <- list.files()
dataset = c()
for (file in file_list){
if (exists("dataset")){
temp_dataset <-read.csv(file, header=TRUE, sep=",")
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset) }
}
df = dataset; colnames(df) = c('species','percent in wrong compartment')
head(df)
df = dataset; colnames(df) = c('species','percent in wrong compartment')
# add database
plasmodb = c("PadleriG01","PbergheiANKA","PbillcollinsiG01","PblacklockiG01","Pchabaudichabaudi","PcoatneyiHackeri","PcynomolgiB","PcynomolgiM","Pfalciparum3D7","Pfalciparum7G8","PfalciparumCD01","PfalciparumDd2","PfalciparumGA01","PfalciparumGB4","PfalciparumGN01","PfalciparumHB3","PfalciparumIT","PfalciparumKE01","PfalciparumKH01","PfalciparumKH02","PfalciparumML01","PfalciparumSD01","PfalciparumSN01","PfalciparumTG01","PfragileNilgiri","PgaboniG01","PgaboniSY75","Pgallinaceum8A","PinuiSanAntonio1","PknowlesiH","PknowlesiMalayanPk1A","PmalariaeUG01","PovalecurtisiGH01","PpraefalciparumG01","PreichenowiCDC","PreichenowiG01","PrelictumSGS1-like","PvinckeipetteriCR","Pvinckeivinckeivinckei","PvivaxP01","PvivaxSal1","Pyoeliiyoelii17X","Pyoeliiyoelii17XNL","PyoeliiyoeliiYM")
cryptodb = c("Candersoni30847","Chominis30976","ChominisTU502","ChominisTU502_2012","ChominisUdeA01","CmeleagridisUKMEL1","CmurisRN66","CparvumIowaII","CtyzzeriUGA55", "Cubiquitum39726","CveliaCCMP2878", "GniphandrodesUnknown", "VbrassicaformisCCMP3155")
giardiadb = c("GintestinalisAssemblageADH", "GintestinalisAssemblageAWB", "GintestinalisAssemblageBGS", "GintestinalisAssemblageBGS_B", "GintestinalisAssemblageEP15", "SsalmonicidaATCC50377") # No AssemblageA
tritrypdb = c("BayalaiB08-376","CfasciculataCfCl","EmonterogeiiLV88","LaethiopicaL147", "LarabicaLEM1108", "LbraziliensisMHOMBR75M2903", "LbraziliensisMHOMBR75M2904", "LdonovaniBPK282A1", "LenriettiiLEM3045", "LgerbilliLEM452","LinfantumJPCM5", "LmajorFriedlin", "LmajorLV39c5", "LmajorSD75.1", "LmexicanaMHOMGT2001U1103", "LpanamensisMHOMCOL81L13","LpanamensisMHOMPA94PSC1", "LpyrrhocorisH10", "LseymouriATCC30220", "LspMARLEM2494", "LtarentolaeParrotTarII", "LtropicaL590", "LturanicaLEM423", "PconfusumCUL13","TbruceigambienseDAL972", "TbruceiLister427", "TbruceiTREU927", "TcongolenseIL3000", "TcruziCLBrener", "TcruziCLBrenerEsmeraldo-like", "TcruziCLBrenerNon-Esmeraldo-like", "TcruzicruziDm28c","TcruziDm28c", "TcruzimarinkelleiB7", "TcruziSylvioX10-1", "TcruziSylvioX10-1-2012","TevansiSTIB805", "TgrayiANR4", "TrangeliSC58", "TvivaxY486", "TtheileriEdinburgh")
# MUST ASK PERMISSION TO USE MANY OF THE TRITRYP GENOMES - S.M. Beverley at Wash U
trichdb = c("TvaginalisG3")
amoebadb =  c("AcastellaniiNeff", "EdisparSAW760", "EhistolyticaHM1IMSS-A", "EhistolyticaHM1IMSS-B", "EhistolyticaHM1IMSS", "EhistolyticaHM3IMSS", "EhistolyticaKU27", "EinvadensIP1", "EmoshkovskiiLaredo", "EnuttalliP19", "NfowleriATCC30863") # ALL
toxodb = c("CcayetanensisCHN_HEN01", "CsuisWienI","EacervulinaHoughton", "EbrunettiHoughton", "EfalciformisBayerHaberkorn1970", "EmaximaWeybridge", "EmitisHoughton", "EnecatrixHoughton", "EpraecoxHoughton", "EtenellaHoughton", "HhammondiHH34", "NcaninumLIV", "SneuronaSN3", "SneuronaSOSN1", "TgondiiARI", "TgondiiFOU", "TgondiiGAB2-2007-GAL-DOM2", "TgondiiGT1", "TgondiiMAS", "TgondiiME49", "Tgondiip89", "TgondiiRH", "TgondiiRUB", "TgondiiTgCatPRC2", "TgondiiVAND", "TgondiiVEG")
microsporidiadb = c("AalgeraePRA109", "AalgeraePRA339", "AspWSBS2006","EaedisUSNM41457", "EbieneusiH348", "EcanceriGB1","EcuniculiEC1", "EcuniculiEC2", "EcuniculiEC3","EcuniculiEcunIII-L","EcuniculiGBM1", "EhellemATCC50504", "EhellemSwiss", "EhepatopenaeiTH1","EintestinalisATCC50506", "EromaleaeSJ2008","Heriocheircanceri","HeriocheirGB1", "MdaphniaeUGP3", "NausubeliERTm2", "NausubeliERTm6", "NbombycisCQ1", "NceranaeBRL01", "NceranaePA08_1199","NdisplodereJUm2807","NparisiiERTm1", "NparisiiERTm3", "OcolligataOC4", "PneurophiliaMK1", "Slophii42_110", "ThominisUnknown", "VcorneaeATCC50505", "Vculicisfloridensis")
piroplasmadb = c("BbigeminaBOND", "BbovisT2Bo", "BmicrotiRI","BovataMiyake", "CfelisWinnie", "TannulataAnkara", "TequiWA", "TorientalisShintoku", "TparvaMuguga")
database = NA
for (i in 1:nrow(df)) {
if (df$species[i]%in%plasmodb) { y = 'PlasmoDB'
} else if (df$species[i]%in%cryptodb) { y = 'CryptoDB'
} else if (df$species[i]%in%giardiadb) { y = 'GiardiaDB'
} else if (df$species[i]%in%tritrypdb) { y = 'TriTrypDB'
} else if (df$species[i]%in%trichdb) { y = 'TrichDB'
} else if (df$species[i]%in%amoebadb) { y = 'AmoebaDB'
} else if (df$species[i]%in%toxodb) { y = 'ToxoDB'
} else if (df$species[i]%in%microsporidiadb) { y = 'MicrosporidiaDB'
} else if (df$species[i]%in%piroplasmadb) { y = 'PiroplasmaDB'
} else { y = 'error'
print(df$species[i])}
database[i] = y }
head(df)
df%>% group_by(species)%>%coutn()
df%>% group_by(species)%>%count()
library(dplyr)
df%>% group_by(species)%>%count()
10>3>1
